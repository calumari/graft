// Code generated by graftgen (version devel); DO NOT EDIT.

// Source interfaces: UserMapper
// Command: graftgen -interface=UserMapper -output=graft_gen.go

package ptr

// map_User_to_UserDTO maps a value of type User to UserDTO.
func map_User_to_UserDTO(in User) UserDTO {
	// Destination zero value; fields populated by node sequence below.
	var dst UserDTO
	dst.ID = in.ID
	dst.Name = in.Name
	return dst
}

// map_Ptr_User_to_UserDTO maps a value of type *User to UserDTO.
func map_Ptr_User_to_UserDTO(in *User) UserDTO {
	if in == nil {
		return UserDTO{}
	}
	// Destination zero value; fields populated by node sequence below.
	var dst UserDTO
	dst.ID = in.ID
	dst.Name = in.Name
	return dst
}

// map_Ptr_User_to_Ptr_UserDTO maps a value of type *User to *UserDTO.
func map_Ptr_User_to_Ptr_UserDTO(in *User) *UserDTO {
	if in == nil {
		return nil
	}
	// Allocate destination pointer
	dst := new(UserDTO)
	dst.ID = in.ID
	dst.Name = in.Name
	return dst
}

// map_User_to_Ptr_UserDTO maps a value of type User to *UserDTO.
func map_User_to_Ptr_UserDTO(in User) *UserDTO {
	// Allocate destination pointer
	dst := new(UserDTO)
	dst.ID = in.ID
	dst.Name = in.Name
	return dst
}

// userMapperImpl is the generated implementation of UserMapper.
type userMapperImpl struct{}

// NewUserMapper returns a new UserMapper implementation.
func NewUserMapper() UserMapper { return &userMapperImpl{} }

// ToDTO maps p0 to the destination type.
func (m *userMapperImpl) ToDTO(p0 User) UserDTO {
	return map_User_to_UserDTO(p0)
}

// ToDTOFromPtr maps p0 to the destination type.
func (m *userMapperImpl) ToDTOFromPtr(p0 *User) UserDTO {
	return map_Ptr_User_to_UserDTO(p0)
}

// ToDTOPtr maps p0 to the destination type.
func (m *userMapperImpl) ToDTOPtr(p0 *User) *UserDTO {
	return map_Ptr_User_to_Ptr_UserDTO(p0)
}

// ToDTOPtrFromVal maps p0 to the destination type.
func (m *userMapperImpl) ToDTOPtrFromVal(p0 User) *UserDTO {
	return map_User_to_Ptr_UserDTO(p0)
}
