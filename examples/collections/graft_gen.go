// Code generated by graftgen (version devel); DO NOT EDIT.

// Source interfaces: ColMapper
// Command: graftgen -interface=ColMapper -output=graft_gen.go

package collections

// map_3f15186025aa maps a value of type []Elem to []ElemDTO.
func map_3f15186025aa(in []Elem) ([]ElemDTO, error) {
	// Destination zero value; fields populated by node sequence below.
	var dst []ElemDTO
	if in != nil {
		dst = make([]ElemDTO, len(in))
		for i, v := range in { // v used by child nodes
			var mapped ElemDTO
			tmp, err := map_0662979fb6d6(v)
			if err != nil {
				return dst, err
			}
			mapped = tmp

			dst[i] = mapped
		}
	} else {
		dst = nil
	}
	return dst, nil
}

// map_d0ac0bbc1462 maps a value of type map[string]Elem to map[string]ElemDTO.
func map_d0ac0bbc1462(in map[string]Elem) (map[string]ElemDTO, error) {
	// Destination zero value; fields populated by node sequence below.
	var dst map[string]ElemDTO
	if in != nil {
		dst = make(map[string]ElemDTO, len(in))
		for k, v := range in { // k,v used by child nodes
			var mapped ElemDTO
			tmp, err := map_0662979fb6d6(v)
			if err != nil {
				return dst, err
			}
			mapped = tmp

			dst[k] = mapped
		}
	} else {
		dst = nil
	}
	return dst, nil
}

// map_480c38455f38 maps a value of type MapContainer to MapContainerDTO.
func map_480c38455f38(in MapContainer) (MapContainerDTO, error) {
	// Destination zero value; fields populated by node sequence below.
	var dst MapContainerDTO
	if in.Items != nil {
		dst.Items = make(map[string]ElemDTO, len(in.Items))
		for k, v := range in.Items { // k,v used by child nodes
			var mapped ElemDTO
			tmp, err := ElemToElemDTO(v)
			if err != nil {
				return dst, err
			}
			mapped = tmp

			dst.Items[k] = mapped
		}
	} else {
		dst.Items = nil
	}
	return dst, nil
}

// map_652530217676 maps a value of type SliceContainer to SliceContainerDTO.
func map_652530217676(in SliceContainer) (SliceContainerDTO, error) {
	// Destination zero value; fields populated by node sequence below.
	var dst SliceContainerDTO
	if in.Items != nil {
		dst.Items = make([]ElemDTO, len(in.Items))
		for i, v := range in.Items { // v used by child nodes
			var mapped ElemDTO
			tmp, err := ElemToElemDTO(v)
			if err != nil {
				return dst, err
			}
			mapped = tmp

			dst.Items[i] = mapped
		}
	} else {
		dst.Items = nil
	}
	return dst, nil
}

// map_0662979fb6d6 maps a value of type Elem to ElemDTO.
func map_0662979fb6d6(in Elem) (ElemDTO, error) {
	// Destination zero value; fields populated by node sequence below.
	var dst ElemDTO
	tmp, err := ElemToElemDTO(in)
	if err != nil {
		return dst, err
	}
	dst = tmp

	return dst, nil
}

// colMapperImpl is the generated implementation of ColMapper.
type colMapperImpl struct{}

// NewColMapper returns a new ColMapper implementation.
func NewColMapper() ColMapper { return &colMapperImpl{} }

// Map maps p0 to the destination type.
func (m *colMapperImpl) Map(p0 []Elem) ([]ElemDTO, error) {
	return map_3f15186025aa(p0)
}

// MapMap maps p0 to the destination type.
func (m *colMapperImpl) MapMap(p0 map[string]Elem) (map[string]ElemDTO, error) {
	return map_d0ac0bbc1462(p0)
}

// MapMapContainer maps p0 to the destination type.
func (m *colMapperImpl) MapMapContainer(p0 MapContainer) (MapContainerDTO, error) {
	return map_480c38455f38(p0)
}

// MapSliceContainer maps p0 to the destination type.
func (m *colMapperImpl) MapSliceContainer(p0 SliceContainer) (SliceContainerDTO, error) {
	return map_652530217676(p0)
}
